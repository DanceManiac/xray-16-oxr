/*
	Gasmask breath shader			
	Author: Yohjimane
	OpenXRay Engine 2023
	////////////////////////////////////////////////
	Do not copy or redistribute without permission.
	////////////////////////////////////////////////
*/

#include "common.h"
#include "gasmask_common.h"

float fbm(float2 texcoord, int iterations) 
{
	float3 image_noise = s_breath_noise.Sample(smp_rtlinear, texcoord).xyz;
    float value = image_noise.x;
    float amplitude = 1.0;
    float frequency = 1.25; //play with is
    float total_weight = 0.0;

    for (int i = 0; i < iterations; i++) 
    {
        value += image_noise.x * amplitude;
        texcoord *= frequency;
        amplitude *= 1.0; //with this thing too
        total_weight += amplitude;
    }
    return value / total_weight;
}

float4 main(p_screen I) : SV_Target
{
	float3 image = s_image.Sample(smp_rtlinear, I.tc0).xyz;
	// float3 image_blur = s_blur_2.Sample(smp_rtlinear, I.tc0).xyz;
	float3 image_blur = s_image_blurred.Sample(smp_rtlinear, I.tc0).xyz;
    //texcoord
    float2 texcoord = I.tc0;
    
    //ratio correction (remember that only circle tc should be corrected)
    float4 circle_tc_pos;
    circle_tc_pos.xy = texcoord; //texcoord
    circle_tc_pos.x -= 0.5;
    circle_tc_pos.x *= screen_res.x * screen_res.w;
    circle_tc_pos.x += 0.5;
    circle_tc_pos.zw = float2(0.5, 0.5); //position (center of the screen)
    circle_tc_pos.y -= 0.6; // push it down to bottom 1/3 of screen
    
    //circle settings
    float radius = timers.w * .5;
    float distFromCenter = distance(circle_tc_pos.xy, float2(0.5, 0.5)); // get distance between cur pos and approx center of circle
    float fbmFactor = fbm(texcoord, 5.0);

    //draw circle
    radius *= fbmFactor; // apply wiggliness
    float circle = 1.0 - smoothstep(radius, radius + 0.08, length(circle_tc_pos.xy - circle_tc_pos.zw));
    float4 circleTex = float4(circle, circle, circle, 1.0); //cast to float3
    
    // debug
    //image = float4(0.);
    //image_blur = float4(0.);

    float centerRadius = clamp(radius - distFromCenter, 0.0, 1.0);
    circle_tc_pos.xy += radius; // todo: shift where we sample the texture randomly so each breath looks unique
    float4 glossyTex = lerp(s_breath_noise.Sample(smp_rtlinear, circle_tc_pos.xy), float4(1, 1, 1, 1), 0.5); // reuse noise texture as regular one, tint it white

    image_blur = lerp(image_blur, glossyTex, centerRadius * .5); // tint the center of our blurred area
    image = lerp(image, image_blur, circleTex.xyz); // add our blurred area to the main texture

	return float4(image.xyz,1.0);
} 
